// <auto-generated />
using System;
using LecturerManagement.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LecturerManagement.Core.Migrations
{
    [DbContext(typeof(LecturerManagementSystemDbContext))]
    partial class LecturerManagementSystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("LecturerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Permission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LecturerId")
                        .IsUnique()
                        .HasFilter("[LecturerId] IS NOT NULL");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.AdvancedLearning", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LecturerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SchoolYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LecturerID");

                    b.ToTable("AdvancedLearnings");
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.Class", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormsOfTraining")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfStudent")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TrainingSystemId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TrainingSystemId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.DynamicClassFactor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Coefficient")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FromDynamic")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TeachesForm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ToDynamic")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DynamicClassFactors");
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.GraduationThesis", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LecturerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("MarkSessionNumbers")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RebuttalProjectNumbers")
                        .HasColumnType("int");

                    b.Property<string>("SchoolYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TopicNumbers")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("LecturerId");

                    b.ToTable("GraduationTheses");
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.Lecturer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AcademicLevel")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("IdentityCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Portrait")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PositionID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StandardTimeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SubjectDepartmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("YearStartWork")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PositionID");

                    b.HasIndex("StandardTimeId");

                    b.HasIndex("SubjectDepartmentId");

                    b.ToTable("Lecturers");
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.LecturerScientificResearch", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LecturerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LevelOfResearch")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("YearOfResearchParticipation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LecturerId");

                    b.ToTable("LecturerScientificResearches");
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.MachineRoom", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LecturerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QantityRoom")
                        .HasColumnType("int");

                    b.Property<string>("SchoolYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LecturerId");

                    b.ToTable("MachineRooms");
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.Position", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = "CV01",
                            CreatedDate = new DateTime(2022, 3, 9, 11, 59, 49, 474, DateTimeKind.Local).AddTicks(1322),
                            Description = "Giảm 25 phần trăm số giờ chuẩn.",
                            DiscountPercent = 25,
                            Name = "Trưởng Khoa",
                            Status = 1
                        },
                        new
                        {
                            Id = "CV02",
                            CreatedDate = new DateTime(2022, 3, 9, 11, 59, 49, 474, DateTimeKind.Local).AddTicks(1342),
                            Description = "Giảm 20 phần trăm số giờ chuẩn.",
                            DiscountPercent = 20,
                            Name = "Phó Khoa",
                            Status = 1
                        },
                        new
                        {
                            Id = "CV03",
                            CreatedDate = new DateTime(2022, 3, 9, 11, 59, 49, 474, DateTimeKind.Local).AddTicks(1345),
                            Description = "Giảm 20 phần trăm số giờ chuẩn.",
                            DiscountPercent = 20,
                            Name = "Trưởng Bộ Môn",
                            Status = 1
                        },
                        new
                        {
                            Id = "CV04",
                            CreatedDate = new DateTime(2022, 3, 9, 11, 59, 49, 474, DateTimeKind.Local).AddTicks(1347),
                            Description = "Dành cho những giảng viên chỉ phụ trách công việc giảng dạy...",
                            DiscountPercent = 0,
                            Name = "Không Có Chức Vụ",
                            Status = 1
                        });
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.ScientificResearchGuide", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LecturerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SchoolYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StudentYear")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LecturerId");

                    b.ToTable("ScientificResearchGuides");
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.StandardTime", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StandardHours")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StandardTimes");

                    b.HasData(
                        new
                        {
                            Id = "CD01",
                            CreatedDate = new DateTime(2022, 3, 9, 11, 59, 49, 474, DateTimeKind.Local).AddTicks(1670),
                            Description = "Số giờ chuẩn cho 1 kỳ học",
                            Name = "Giáo sư và giảng viên cao cấp",
                            StandardHours = 360,
                            Status = 1
                        },
                        new
                        {
                            Id = "CD02",
                            CreatedDate = new DateTime(2022, 3, 9, 11, 59, 49, 474, DateTimeKind.Local).AddTicks(1673),
                            Description = "Số giờ chuẩn cho 1 kỳ học",
                            Name = "Phó giáo sư và giảng viên chính",
                            StandardHours = 320,
                            Status = 1
                        },
                        new
                        {
                            Id = "CD03",
                            CreatedDate = new DateTime(2022, 3, 9, 11, 59, 49, 474, DateTimeKind.Local).AddTicks(1676),
                            Description = "Số giờ chuẩn cho 1 kỳ học",
                            Name = "Giảng viên",
                            StandardHours = 280,
                            Status = 1
                        },
                        new
                        {
                            Id = "CD04",
                            CreatedDate = new DateTime(2022, 3, 9, 11, 59, 49, 474, DateTimeKind.Local).AddTicks(1678),
                            Description = "Số giờ chuẩn cho 1 kỳ học",
                            Name = "Giảng viên tập sự",
                            StandardHours = 140,
                            Status = 1
                        });
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.Subject", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuantityUnit")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SubjectTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TrainingSystemId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SubjectTypeId");

                    b.HasIndex("TrainingSystemId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.SubjectDepartment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SubjectDepartments");

                    b.HasData(
                        new
                        {
                            Id = "BM01",
                            CreatedDate = new DateTime(2022, 3, 9, 11, 59, 49, 474, DateTimeKind.Local).AddTicks(1545),
                            Description = "Bộ Môn Hệ Thống Thông Tin",
                            Name = "Hệ Thống Thông Tin",
                            Status = 1
                        },
                        new
                        {
                            Id = "BM02",
                            CreatedDate = new DateTime(2022, 3, 9, 11, 59, 49, 474, DateTimeKind.Local).AddTicks(1548),
                            Description = "Bộ Môn Công Nghệ Thông Tin",
                            Name = "Công Nghệ Thông Tin",
                            Status = 1
                        },
                        new
                        {
                            Id = "BM03",
                            CreatedDate = new DateTime(2022, 3, 9, 11, 59, 49, 474, DateTimeKind.Local).AddTicks(1550),
                            Description = "Truyền Thông Mạng Máy Tính",
                            Name = "Truyền Thông Mạng Máy Tính",
                            Status = 1
                        });
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.SubjectType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SubjectTypes");

                    b.HasData(
                        new
                        {
                            Id = "LM01",
                            CreatedDate = new DateTime(2022, 3, 9, 11, 59, 49, 474, DateTimeKind.Local).AddTicks(1708),
                            Description = "Môn học lý thuyết",
                            Name = "Lý Thuyết",
                            Status = 1
                        },
                        new
                        {
                            Id = "LM02",
                            CreatedDate = new DateTime(2022, 3, 9, 11, 59, 49, 474, DateTimeKind.Local).AddTicks(1711),
                            Description = "Môn học thực hành",
                            Name = "Thực Hành",
                            Status = 1
                        },
                        new
                        {
                            Id = "LM03",
                            CreatedDate = new DateTime(2022, 3, 9, 11, 59, 49, 474, DateTimeKind.Local).AddTicks(1713),
                            Description = "Thực tập cơ sở và thực tập tốt nghiệp",
                            Name = "Các Đồ án, TTCS,TTCN, TTTN, Project",
                            Status = 1
                        },
                        new
                        {
                            Id = "LM04",
                            CreatedDate = new DateTime(2022, 3, 9, 11, 59, 49, 474, DateTimeKind.Local).AddTicks(1715),
                            Description = "Thực tập doanh nghiệp",
                            Name = "Thực tập doanh nghiệp",
                            Status = 1
                        },
                        new
                        {
                            Id = "LM05",
                            CreatedDate = new DateTime(2022, 3, 9, 11, 59, 49, 474, DateTimeKind.Local).AddTicks(1717),
                            Description = "Thực tập sư phạm",
                            Name = "Thực tập sư phạm",
                            Status = 1
                        });
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.Teaching", b =>
                {
                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LectureId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfStudents")
                        .HasColumnType("int");

                    b.Property<string>("SchoolYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("SubjectId", "LectureId", "ClassId");

                    b.HasIndex("ClassId");

                    b.HasIndex("LectureId");

                    b.ToTable("Teachings");
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.TrainingSystem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfLearningUnit")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TrainingSystems");
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.Account", b =>
                {
                    b.HasOne("LecturerManagement.Core.Models.Entities.Lecturer", "Lecturer")
                        .WithOne("Account")
                        .HasForeignKey("LecturerManagement.Core.Models.Entities.Account", "LecturerId");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.AdvancedLearning", b =>
                {
                    b.HasOne("LecturerManagement.Core.Models.Entities.Lecturer", "Lecturer")
                        .WithMany("AdvancedLearnings")
                        .HasForeignKey("LecturerID");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.Class", b =>
                {
                    b.HasOne("LecturerManagement.Core.Models.Entities.TrainingSystem", "TrainingSystem")
                        .WithMany("Classes")
                        .HasForeignKey("TrainingSystemId");

                    b.Navigation("TrainingSystem");
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.GraduationThesis", b =>
                {
                    b.HasOne("LecturerManagement.Core.Models.Entities.Class", "Class")
                        .WithMany("GraduationTheses")
                        .HasForeignKey("ClassId");

                    b.HasOne("LecturerManagement.Core.Models.Entities.Lecturer", "Lecturer")
                        .WithMany("GraduationTheses")
                        .HasForeignKey("LecturerId");

                    b.Navigation("Class");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.Lecturer", b =>
                {
                    b.HasOne("LecturerManagement.Core.Models.Entities.Position", "Position")
                        .WithMany("Lecturers")
                        .HasForeignKey("PositionID");

                    b.HasOne("LecturerManagement.Core.Models.Entities.StandardTime", "StandardTime")
                        .WithMany("Lecturers")
                        .HasForeignKey("StandardTimeId");

                    b.HasOne("LecturerManagement.Core.Models.Entities.SubjectDepartment", "SubjectDepartment")
                        .WithMany("Lecturers")
                        .HasForeignKey("SubjectDepartmentId");

                    b.Navigation("Position");

                    b.Navigation("StandardTime");

                    b.Navigation("SubjectDepartment");
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.LecturerScientificResearch", b =>
                {
                    b.HasOne("LecturerManagement.Core.Models.Entities.Lecturer", "Lecturer")
                        .WithMany("LecturerScientificResearches")
                        .HasForeignKey("LecturerId");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.MachineRoom", b =>
                {
                    b.HasOne("LecturerManagement.Core.Models.Entities.Lecturer", "Lecturer")
                        .WithMany("MachineRooms")
                        .HasForeignKey("LecturerId");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.ScientificResearchGuide", b =>
                {
                    b.HasOne("LecturerManagement.Core.Models.Entities.Lecturer", "Lecturer")
                        .WithMany("ScientificResearchGuides")
                        .HasForeignKey("LecturerId");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.Subject", b =>
                {
                    b.HasOne("LecturerManagement.Core.Models.Entities.SubjectType", "SubjectType")
                        .WithMany("Subjects")
                        .HasForeignKey("SubjectTypeId");

                    b.HasOne("LecturerManagement.Core.Models.Entities.TrainingSystem", "TrainingSystem")
                        .WithMany("Subjects")
                        .HasForeignKey("TrainingSystemId");

                    b.Navigation("SubjectType");

                    b.Navigation("TrainingSystem");
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.Teaching", b =>
                {
                    b.HasOne("LecturerManagement.Core.Models.Entities.Class", "Class")
                        .WithMany("Teachings")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LecturerManagement.Core.Models.Entities.Lecturer", "Lecturer")
                        .WithMany("Teaches")
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LecturerManagement.Core.Models.Entities.Subject", "Subject")
                        .WithMany("Teachings")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Lecturer");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.Class", b =>
                {
                    b.Navigation("GraduationTheses");

                    b.Navigation("Teachings");
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.Lecturer", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("AdvancedLearnings");

                    b.Navigation("GraduationTheses");

                    b.Navigation("LecturerScientificResearches");

                    b.Navigation("MachineRooms");

                    b.Navigation("ScientificResearchGuides");

                    b.Navigation("Teaches");
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.Position", b =>
                {
                    b.Navigation("Lecturers");
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.StandardTime", b =>
                {
                    b.Navigation("Lecturers");
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.Subject", b =>
                {
                    b.Navigation("Teachings");
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.SubjectDepartment", b =>
                {
                    b.Navigation("Lecturers");
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.SubjectType", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("LecturerManagement.Core.Models.Entities.TrainingSystem", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Subjects");
                });
#pragma warning restore 612, 618
        }
    }
}
